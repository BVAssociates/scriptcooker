#! /usr/bin/env perl
#
#    This file is part of ScriptCooker.
#
#    ScriptCooker is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    ScriptCooker is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with ScriptCooker.  If not, see <http://www.gnu.org/licenses/>.
#
# --------------------------------------------------------------
# BV Associates, 2011
#
# CLES :     I-TOOLS
# REVISION : $Revision: 395 $
# AUTEUR :   V. Bauchart (BV Associates)
# DATE :     27/09/2011
#
# --------------------------------------------------------------
#
# OBJECTIF
#    
#
# SYNOPSIS
#    Usage : Insert [-h] [-f] [-x] INTO <Colonnes> <Table>
#
# OPTIONS
#    -h : l'utilisation de la ligne de commande
#    -f : si la ligne existe déjà, met à jour
#    -x : declenche les triggers
#
# ARGUMENTS
#    Columns : liste des colonnes valorisées
#    Table : Table à modifier
#    Values|- : valeurs séparées par le séparateur de la définition
#
# PREREQUIS
#    TOOLS_HOME
#
# REMARQUE
#
# --------------------------------------------------------------
#
# HISTORIQUE
#
# --------------------------------------------------------------

# Inclusions obligatoires
use strict;
use warnings;
use Getopt::Std;
use ScriptCooker::Log 2.1.0 qw{$logger _t set_exit_code};
use ScriptCooker::ITable 2.1.0;
use Carp;

# variables globales

sub usage {
    die(_t("Usage: [_1]",<<USAGE ));
Insert [-h] [-f] [-x] INTO <Colonnes> <Table> VALUES <Values|->
USAGE
}

#  Traitement des Options
###########################################################

my %opts;
getopts( 'hfx', \%opts ) or usage();

my $force_insert = $opts{f};

usage() if $opts{h};

my $execute_trigger = $opts{x};

#  Traitement des arguments
###########################################################

if ( @ARGV < 4 ) {
    $logger->error(_t("Le nombre d'arguments est incorrect"));
    usage();
}

my $table_name;
my @columns;
my @values;

my $current_keyword;
foreach my $arg ( @ARGV ) {

    if ( ! $current_keyword ) {
        if ( uc($arg) eq 'INTO' ) {
            $current_keyword = uc($arg);
        }
        else {
            usage();
        }
    }
    elsif ($current_keyword eq 'INTO') {
        $current_keyword = 'COLUMN';
        $table_name = $arg;   
    }
    elsif ($current_keyword eq 'COLUMN') {
        if ( uc($arg) eq 'VALUES' ) {
            $current_keyword = uc($arg);
        }
        else {
            push @columns, $arg;   
        }
    }
    elsif ( $current_keyword eq 'VALUES') {
        push @values, $arg;   
    }
}

if ( @columns ) {
    @columns = split(/\s*,\s*/, join(' ', @columns));
}

if ( !$table_name || $table_name eq '-' ) {
    usage();
}


#  Corps du script
###########################################################

my $itable;

$itable = ScriptCooker::ITable->open($table_name);

if ( @columns ) {
    $itable->query_field(@columns);
}
else {
    @columns = $itable->field();
}

my $separator = $itable->definition()->separator();

# recherche des VALUES sur l'entree standard
if ( @values == 1 && $values[0] eq '-' ) {
    my $values = <STDIN>;
    chomp $values;

    if ( $values ) {
        @values = ( $values );
    }
    else {
        @values = ();
    }
}

if ( ! @values ) {
    die(_t("Aucune valeur a inserer n'est specifiee"));
}


# découpe les valeurs
my @split_values;
foreach my $value ( @values ) {
    # essayons de decouper les lignes
    #-1 : meme les champs vides
    my @field = split($separator, $value,-1);
    push @split_values, @field;
}
@values=@split_values;

if ( @values > @columns ) {
    die (_t("Il y a trop de valeurs par rapport au nombre de colonnes"));
}

if ( @values < @columns ) {
    die (_t("Il n'y a pas assez de valeurs par rapport au nombre de colonnes"));
}

my %update_hash;
foreach my $field ( @columns ) {
    $update_hash{$field}=shift @values;
}

if ( $force_insert ) {
    $itable->force_insert(1);
}

if ( $execute_trigger ) {
    local %ENV = ( %ENV, %update_hash );
    eval { $itable->eval_trigger('Insert','PreAction') };
    if ( $@ ) {
        set_exit_code(202);
        warn($@);
    }
}

$itable->insert_row(%update_hash);

if ( $execute_trigger ) {
    local %ENV = ( %ENV, %update_hash );
    eval { $itable->eval_trigger('Insert','PostAction') };
    if ( $@ ) {
        set_exit_code(202);
        warn($@);
    }
}


#! /usr/bin/env perl
#
#    This file is part of ScriptCooker.
#
#    ScriptCooker is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    ScriptCooker is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with ScriptCooker.  If not, see <http://www.gnu.org/licenses/>.
#
# --------------------------------------------------------------
# BV Associates, 2011
#
# CLES :     I-TOOLS
# REVISION : $Revision: 424 $
# AUTEUR :   V. Bauchart (BV Associates)
# DATE :     27/09/2011
#
# --------------------------------------------------------------
#
# OBJECTIF
#    
#
# SYNOPSIS
#    Usage : Log_Error [-h] [-s] [-l] [-o] Numero Message
#
# OPTIONS
#    -h : l'utilisation de la ligne de commande
#    -s : Ecrit un message seulement sur l'ecran
#    -l : Ecrit un message seulement dans le fichier de log standard
#    -o : Ecrit à l'ecran le message destine a la log standard
#
# ARGUMENTS
#    Numero de message de la table error_message
#    Message : Message a traiter
#
# PREREQUIS
#    TOOLS_HOME
#
# REMARQUE
#
# --------------------------------------------------------------
#
# HISTORIQUE
#
# --------------------------------------------------------------

# Inclusions obligatoires
use strict;
use warnings;
use Getopt::Std;
use ScriptCooker::Log 2.1.0 qw{$logger _t init_logger set_exit_code};
use ScriptCooker::ITable 2.1.0;
use ScriptCooker::Utils 2.1.0;
use Carp;

# variables globales

sub usage {
        croak(_t("Usage: [_1]","Log_Error [-h] [-s] [-l] [-o] Code Message"));
}

#  Traitement des Options
###########################################################

my %opts;
getopts( 'hslo', \%opts ) or usage();

my $print_output     =1 if $opts{s};
my $print_log        =1 if $opts{l};
my $print_log_output =1 if $opts{o};

usage() if $opts{h};

# options par defaut
if (! %opts) {
    ($print_output,$print_log)=(1,1);
}

#  Traitement des arguments
###########################################################

if ( @ARGV < 1 ) {
    $logger->error( _t("Le nombre d'arguments est incorrect"));
    usage();
}

if (! $ENV{BV_PROC} ) {
    croak( _t("Variable d'environnement [_1] manquante ou non exportee !", "BV_PROC"));
}

my $error_code = shift @ARGV;
my @message_prepare    = @ARGV;

#  Corps du script
###########################################################

if ( $ENV{BV_SEVERITE} ) {
    set_exit_code($ENV{BV_SEVERITE});
}

# calcul de la "Function"
my $bv_proc_sep=$ENV{BV_PROC_SEP} || ':';
my $function;
if ( $ENV{BV_PROC} ) {
    # recuperation du dernier BV_PROC
    my @proc = split( /$bv_proc_sep/, $ENV{BV_PROC});
    $function = $proc[-1];
}

# calcul du message à afficher
my $format;
my $format_generic;

my $error_messages = ScriptCooker::ITable->open("error_messages");
#TODO utiliser les conditions ITable
$error_messages->query_condition("Error = $error_code");

while (my %message = $error_messages->fetch_row() ) {

    if (defined $function && $function eq $message{Function}) {
        # message d'erreur trouvé
        $format = $message{Message};
        last;
    }
    elsif ($message{Function} eq 'generic') {
        # on garde le message generic au cas ou
        $format_generic = $message{Message};
    }

}
$error_messages->close();

if ( ! defined $format ) {
    if ( defined $format_generic) {
        $format = $format_generic;
    }
    else {
        croak(_t("Numero d'erreur [_1] non reference.",$error_code));
    }
}

# travail sur le message
$format = evaluate_variables($format, {leave_unknown => 1});
$format = _t($format);

my $message;
if ( @message_prepare) {
    $message = sprintf ( $format, @message_prepare);
}
else {
    $message = $format;
}

my $new_logger;
if ( $print_log_output ) {
    $new_logger=init_logger(undef,"STDOUT");
    $new_logger->error($message);
}

if ( $print_output || $print_log ) {

    my $screen;
    if ( $print_output ) {
        $screen = "STDERR";
    }

    my $file;
    if ( $print_log ) {
        if ( ! $ENV{BV_LOGFILE} ) {
        }
        $file = $ENV{BV_LOGFILE};
    }

    $new_logger=init_logger($screen,$file);
    $new_logger->error($message);
}

set_exit_code(0);
